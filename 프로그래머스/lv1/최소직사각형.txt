문제설명

문제 설명
명함 지갑을 만드는 회사에서 지갑의 크기를 정하려고 합니다. 다양한 모양과 크기의 
명함들을 모두 수납할 수 있으면서, 작아서 들고 다니기 편한 지갑을 만들어야 합니다. 
이러한 요건을 만족하는 지갑을 만들기 위해 디자인팀은 모든 명함의 가로 길이와 세로 길이를 
조사했습니다.

아래 표는 4가지 명함의 가로 길이와 세로 길이를 나타냅니다.

명함번호	가로길이	세로길이
1	60	50
2	30	70
3	60	30
4	80	40
가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 80(가로) x 70(세로) 크기의
 지갑을 만들면 모든 명함들을 수납할 수 있습니다. 하지만 2번 명함을 가로로 눕혀 수납한다면
 80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 수납할 수 있습니다. 이때의 지갑 
크기는 4000(=80 x 50)입니다.

모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다. 
모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록 
solution 함수를 완성해주세요.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

입출력 예

입출력 예
sizes						result
[[60, 50], [30, 70], [60, 30], [80, 40]]	4000
[[10, 7], [12, 3], [8, 15], [14, 7], [5, 15]]	120
[[14, 4], [19, 6], [6, 16], [18, 7], [7, 11]]	133


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


풀이과정

1. 가로길이의 최댓값 * 세로길이의 최댓값을 구하는 과정이다.
2. 우선 for문을 한 번 돌려 sizes[i][0]의 길이가 sizes[i][1]의 길이보다 크게 만들어 준다.
3. 그 후 for을 또 돌려 sizes[i][0]들끼리 최댓값, sizes[i][1]들끼리 중 최댓값을 구해준다.
4. 그 값들을 곱해서 리턴.

코드

function solution(sizes) {
    let mul = [];
    let width = 0;
    let height = 0;
    for(let i=0; i< sizes.length; i++){
        let temp = 0;
        if(sizes[i][0] <= sizes[i][1]) {
            temp = sizes[i][1];
            sizes[i][1] = sizes[i][0];
            sizes[i][0] = temp;
        }
    }
    
    for(let i=0; i<sizes.length; i++){
        if(width <= sizes[i][0]) width = sizes[i][0]
        if(height <= sizes[i][1]) height = sizes[i][1]
    }
    return width * height;
    
}

다른 풀이

2번과정을 for문을 돌려 여러 줄로 사용하기 보다는

const rotated = sizes.map(([w, h]) => w < h ? [h, w] : [w, h]);

코드로 한 줄로 줄일 수 있다.( map함수와 삼항연산자의 조합 )

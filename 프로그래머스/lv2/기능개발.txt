
문제 설명

프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때
 서비스에 반영할 수 있습니다.

또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 
먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.

먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 
개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를
 return 하도록 solution 함수를 완성하세요.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

입출력 예
progresses			speeds			return
[93, 30, 55]			[1, 30, 5]		[2, 1]
[95, 90, 99, 99, 80, 99]	[1, 1, 1, 1, 1, 1]	[1, 3, 2]



입출력 예 설명

입출력 예 #1
첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.
두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다.
 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.
세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.

따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.

입출력 예 #2
모든 기능이 하루에 1%씩 작업이 가능하므로, 작업이 끝나기까지 남은 일수는 각각 5일, 10일, 1일, 1일, 
20일, 1일입니다. 어떤 기능이 먼저 완성되었더라도 앞에 있는 모든 기능이 완성되지 않으면 배포가 불가능합니다.

따라서 5일째에 1개의 기능, 10일째에 3개의 기능, 20일째에 2개의 기능이 배포됩니다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

풀이과정
1. return을 할 배열의 변수,
 배포일 변수,
 오늘 배포되는 기능의 변수,
 현재 기능의 작업 진도 담을 변수

2. 우선 배포할게 남아 있으면 계속 돌려준다.(while)
3. 현재 기능의 작업 진도에 첫번째 기능의 작업 진도로 초깃값으로 넣어 준다.
4. if문을 이용해서 만약 현재 작업진도가 100 이상이면 cnt를 하나 올려주고
	progresses와 speeds에 담겨있는 것을 앞에 것 하나 지워준다.
5. 만약 아니면 다시한번 cnt가 0보다 크면 배포할게 있는 것이므로 answer에 채워준다.
6. 그리고 배포일을 다음날로 바꾸고 배포되는 기능의 수를 0 으로 초기화 시킨다.
7. while문이 끝나면 마지막날에 배포되는 것을 push해주고 리턴한다.


코드

function solution(progresses, speeds) {
    var answer = [];
    let days = 1;
    let cnt = 0;
    let progress = 0;
    
    while(progresses[0]){
        progress = progresses[0] + (speeds[0]*days)
        if(progress >= 100){
            cnt++;
            progresses.shift();
            speeds.shift();
        } else {
            if(cnt > 0){
                answer.push(cnt);
            }
            days++;
            cnt = 0;
        }
    }
    answer.push(cnt);
    return answer;
}